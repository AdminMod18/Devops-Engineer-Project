name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
  runs-on: ubuntu-latest
  steps:
    - name: Check out the code
      uses: actions/checkout@v3

    - name: Verify Terraform directory exists
      run: |
        if [ ! -d "terraform" ]; then
          echo "❌ Terraform directory not found!"
          exit 1
        fi

    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start --driver=docker
        mkdir -p ~/.kube && minikube kubectl -- config view --raw > ~/.kube/config
        echo "✅ Minikube installed and started"

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init -upgrade

    - name: Fix plugin permissions
      run: |
        chmod -R +x terraform/.terraform

    - name: Format Terraform files
      run: |
        cd terraform
        terraform fmt -recursive

    - name: Validate Terraform configuration
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install Docker-Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Log in to Docker
        run: |
          if [[ -z "$DOCKER_USERNAME" || -z "$DOCKER_PASSWORD" ]]; then
            echo "Docker credentials not set"
            exit 1
          fi
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build -t myapp .

      - name: Push Docker image to DockerHub
        run: docker push myapp

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install Docker-Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Run Tests
        run: |
          docker-compose -f docker-compose.test.yml up --build
          docker-compose -f docker-compose.test.yml down

  ansible:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/hosts.ini ansible/playbook.yml || echo "Ansible playbook failed, but continuing."

  kubernetes:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Verify k8s directory
        run: |
          if [ ! -d "k8s/" ]; then
            echo "Directory k8s/ not found!"
            exit 1
          fi

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      - name: Start Minikube
        run: minikube start --driver=docker

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Verify Minikube Cluster
        run: kubectl cluster-info || (echo "Minikube not ready, retrying..." && sleep 10 && kubectl cluster-info)

      - name: Apply Kubernetes Configurations
        run: kubectl apply -f k8s/ --validate=false

      - name: Check Kubernetes Pods
        run: kubectl get pods -A

  cleanup:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
